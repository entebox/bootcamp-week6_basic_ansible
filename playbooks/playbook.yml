- name: Deploy Weight Tracker
  hosts: '{{ envHosts }}'

  tasks:
    - name: Update apt-get repo and cache
      become: yes
      apt: update_cache=yes force_apt_get=yes cache_valid_time=3600

    - name: Upgrade all apt packages
      become: yes
      apt: upgrade=dist force_apt_get=yes

    - name: reset remote directory 
      file:
        state: absent
        path: '{{ homeDir }}/{{ appDir }}'

    - name: Creates directory
      file:
        path: '{{ homeDir }}/{{ appDir }}'
        state: directory

    - name: Remove old tar files on remote location
      shell: 'rm -rf {{ homeDir }}/BC-APP*.tar'
      ignore_errors: True

    - name: copy artifact tar to remote location
      copy:
        src: '{{ item }}'
        dest: '{{ homeDir }}'
      with_fileglob: '/mnt/c/Rhinops_Sela/Week7_terraform/agent/_work/5/a/BC-APP*.tar'

    - name: find tar file
      find: 
        paths: "{{ homeDir }}" 
        patterns: "BC-APP*.tar"
      register: find_result

    - name: Unpack file on remote host
      unarchive: 
         src: "{{ item.path }}" 
         dest: "{{ homeDir }}/{{ appDir }}"
         remote_src: yes
      with_items: "{{ find_result.files }}"

    - name: replace env credentials
      replace:
        path: "{{ item.path }}"
        regexp: "{{ item.regexp1 }}"
        replace: "{{ item.replace }}"
      with_items:
      - { path: "{{ homeDir }}/{{ appDir }}/.env", regexp1: "^(.*)PGHOST(.*)$", replace: "{{ pghost }}"}
      - { path: "{{ homeDir }}/{{ appDir }}/.env", regexp1: "^(.*)PGUSERNAME(.*)$", replace: "{{ pgusername }}"}
      - { path: "{{ homeDir }}/{{ appDir }}/.env", regexp1: "^(.*)PGDATABASE(.*)$", replace: "{{ pgdatabase }}"}
      - { path: "{{ homeDir }}/{{ appDir }}/.env", regexp1: "^(.*)PGPASSWORD(.*)$", replace: "{{ pgpassword }}"}
      - { path: "{{ homeDir }}/{{ appDir }}/.env", regexp1: "^(.*)HOST_URL(.*)$", replace: "{{ hostUrl }}"}
      - { path: "{{ homeDir }}/{{ appDir }}/.env", regexp1: "^(.*)OKTA_ORG_URL(.*)$", replace: "{{ oktaUrl }}"}
      - { path: "{{ homeDir }}/{{ appDir }}/.env", regexp1: "^(.*)OKTA_CLIENT_ID(.*)$", replace: "{{ oktaClientID }}"}
      - { path: "{{ homeDir }}/{{ appDir }}/.env", regexp1: "^(.*)OKTA_CLIENT_SECRET(.*)$", replace: "{{ oktaSecret }}"}
      - { path: "{{ homeDir }}/{{ appDir }}/.env", regexp1: "^(.*)COOKIE_ENCRYPT_PWD(.*)$", replace: "{{ cookie }}"}

    - name: initiate npm on working folder
      shell: npm init -y
      args:
        chdir: '{{ homeDir }}/{{ appDir }}'

    - name: initiate the database
      command: 'npm run initdb'
      run_once: true
      async: 25
      poll: 0
      args:
        chdir: '{{ homeDir }}/{{ appDir }}'

    - name: install PM2
      become: yes
      command: "npm install pm2 -g"
      args:
        chdir: '{{ homeDir }}/{{ appDir }}'

    - name: remove application if present
      command: 'pm2 delete weight_tracker'
      ignore_errors: True
      args:
        chdir: '{{ homeDir }}/{{ appDir }}'

    - name: run the application
      command: 'pm2 start "npm run dev" --name weight_tracker'
      args:
        chdir: '{{ homeDir }}/{{ appDir }}'

    - name: run pm2 startup
      become: true
      command: 'pm2 startup systemd -u {{ pm2Username }} --hp /home/{{ pm2Username }}'
      ignore_errors: True
      environment:
        PATH: "{{ ansible_env.PATH }}"

    - name: Save PM2 configuration
      command: pm2 save
